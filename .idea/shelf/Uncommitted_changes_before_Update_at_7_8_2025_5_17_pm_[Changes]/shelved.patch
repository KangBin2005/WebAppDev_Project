Index: templates/includes/staff_navbar.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><style>\r\n /* Enhanced active state for navbar items */\r\n  .navbar-nav .active > .nav-link {\r\n    font-weight: bold;\r\n    color: #ffffff !important;\r\n    background-color: rgba(255, 255, 255, 0.3) !important;  /* More opaque */\r\n    border-radius: 4px;\r\n    box-shadow: 0 2px 4px rgba(0,0,0,0.2);  /* Added shadow */\r\n    text-shadow: 0 0 5px rgba(255,255,255,0.5);  /* Glow effect */\r\n  }\r\n\r\n  /* Enhanced dropdown active items */\r\n  .dropdown-item.active,\r\n  .dropdown-item:active {\r\n    background-color: #007BFF !important;\r\n    color: white !important;\r\n    font-weight: bold;\r\n  }\r\n\r\n  /* Hover states */\r\n  .nav-link:hover {\r\n    background-color: rgba(255, 255, 255, 0.15) !important;\r\n  }\r\n\r\n  .dropdown-item:hover {\r\n    background-color: #f8f9fa !important;\r\n    color: #007BFF !important;\r\n  }\r\n</style>\r\n\r\n<nav class=\"navbar navbar-expand-lg\"\r\n     style=\"background: linear-gradient(90deg, #007BFF, #28A745); padding: 0.5rem 1rem;\">\r\n    <a class=\"navbar-brand d-flex flex-column align-items-start\" href=\"/\"\r\n       style=\"font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\">\r\n        <span style=\"font-size: 2rem; letter-spacing: 2px; font-weight: bold;\">\r\n          <span style=\"color: white;\">SG</span><span style=\"color: #7ed957;\">Enable</span>\r\n        </span>\r\n        <small style=\"color: white; font-size: 0.8rem; line-height: 1;\">Inclusive Society, Enabled Lives</small>\r\n    </a>\r\n\r\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\"\r\n            aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span style=\"display: inline-block; width: 25px;\">\r\n            <span style=\"display: block; height: 2px; background: white; margin: 5px 0;\"></span>\r\n            <span style=\"display: block; height: 2px; background: white; margin: 5px 0;\"></span>\r\n            <span style=\"display: block; height: 2px; background: white; margin: 5px 0;\"></span>\r\n        </span>\r\n    </button>\r\n\r\n    <div class=\"collapse navbar-collapse justify-content-between\" id=\"navbarNav\">\r\n        <!-- Left: Nav links -->\r\n        <ul class=\"navbar-nav\">\r\n            <li class=\"nav-item {% if current_page == 'dashboard' %}active{% endif %}\">\r\n                <a class=\"nav-link text-white\" href=\"{{ url_for('dashboard') }}\">Dashboard</a>\r\n            </li>\r\n            <li class=\"nav-item {% if current_page == 'account_management' %}active{% endif %}\">\r\n\r\n            <!-- Activity Management Dropdown -->\r\n            <li class=\"nav-item dropdown {% if current_page in ['manage_activities', 'activity_participants', 'activity_public'] %}active{% endif %}\">\r\n                <a class=\"nav-link dropdown-toggle text-white\" href=\"#\" id=\"activityDropdown\" role=\"button\"\r\n                   data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                    Activity Management\r\n                </a>\r\n                <div class=\"dropdown-menu\" aria-labelledby=\"activityDropdown\">\r\n                    <a class=\"dropdown-item {% if current_page == 'activity_participants' %}active{% endif %}\"\r\n                       href=\"{{ url_for('activity_participants') }}\">Participants</a>\r\n                    <a class=\"dropdown-item {% if current_page == 'activity_public' %}active{% endif %}\"\r\n                       href=\"{{ url_for('activity_public') }}\">Public</a>\r\n                </div>\r\n            </li>\r\n\r\n            <!-- Enquiry Management Dropdown -->\r\n            <li class=\"nav-item dropdown {% if current_page in ['manage_enquires', 'enquiry_participants', 'enquiry_public'] %}active{% endif %}\">\r\n                <a class=\"nav-link dropdown-toggle text-white\" href=\"#\" id=\"enquiryDropdown\" role=\"button\"\r\n                   data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                    Enquiry Management\r\n                </a>\r\n                <div class=\"dropdown-menu\" aria-labelledby=\"enquiryDropdown\">\r\n                    <a class=\"dropdown-item {% if current_page == 'enquiry_participants' %}active{% endif %}\"\r\n                       href=\"{{ url_for('enquiry_participants') }}\">Participants</a>\r\n                    <a class=\"dropdown-item {% if current_page == 'enquiry_public' %}active{% endif %}\"\r\n                       href=\"{{ url_for('enquiry_public') }}\">Public</a>\r\n                </div>\r\n            </li>\r\n\r\n        <!-- Store Management Dropdown-->\r\n        <li class=\"nav-item dropdown {% if current_page in ['store_management', 'transaction_management', 'product_management'] %}active{% endif %}\">\r\n                <a class=\"nav-link dropdown-toggle text-white\" href=\"#\" id=\"storeDropdown\" role=\"button\"\r\n                   data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                    Store Management\r\n                </a>\r\n                <div class=\"dropdown-menu\" aria-labelledby=\"storeDropdown\">\r\n                    <a class=\"dropdown-item {% if current_page == 'product_management' %}active{% endif %}\"\r\n                       href=\"{{ url_for('manage_product') }}\">Products</a>\r\n                    <a class=\"dropdown-item {% if current_page == 'transaction_management' %}active{% endif %}\"\r\n                       href=\"{{ url_for('enquiry_public') }}\">Transactions</a>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n\r\n\r\n        <!-- Right: Notification + Dropdown -->\r\n        <ul class=\"navbar-nav align-items-center\">\r\n            <!-- Notification Bell -->\r\n            <li class=\"nav-item dropdown mx-3\">\r\n                <a class=\"nav-link text-white position-relative\" href=\"#\"\r\n                   id=\"notificationsDropdown\" role=\"button\" data-toggle=\"dropdown\"\r\n                   aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                    <i class=\"fas fa-bell fa-lg\"></i>\r\n                    <span class=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger\"\r\n                          style=\"font-size: 0.6rem;\">3\r\n                        <span class=\"sr-only\">unread notifications</span>\r\n                    </span>\r\n                </a>\r\n                <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"notificationsDropdown\"\r\n                     style=\"min-width: 250px;\">\r\n                    <h6 class=\"dropdown-header\">Notifications</h6>\r\n                    <a class=\"dropdown-item\" href=\"#\">You have 3 new messages</a>\r\n                    <a class=\"dropdown-item\" href=\"#\">Event starting in 1 hour</a>\r\n                    <a class=\"dropdown-item\" href=\"#\">New announcement available</a>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <a class=\"dropdown-item text-center small text-muted\" href=\"#\">View all</a>\r\n                </div>\r\n            </li>\r\n\r\n            <!-- Staff Dropdown -->\r\n            <li class=\"nav-item dropdown\">\r\n                <a class=\"nav-link dropdown-toggle text-white\" href=\"#\" id=\"userDropdown\" role=\"button\"\r\n                   data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                    {{ session['user'] }} (Staff)\r\n                </a>\r\n                <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"userDropdown\">\r\n                    <a class=\"dropdown-item\" href=\"/profile\">Profile</a>\r\n                    <div class=\"dropdown-divider\"></div>\r\n                    <a class=\"dropdown-item\" href=\"/logout\">Logout</a>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</nav>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/includes/staff_navbar.html b/templates/includes/staff_navbar.html
--- a/templates/includes/staff_navbar.html	(revision 3eea857613544765d55b7bbb3d7d9192da070787)
+++ b/templates/includes/staff_navbar.html	(date 1754558207853)
@@ -55,6 +55,10 @@
             </li>
             <li class="nav-item {% if current_page == 'account_management' %}active{% endif %}">
 
+            <li class="nav-item {% if current_page == 'analytics' %}active{% endif %}">
+                <a class="nav-link text-white" href="{{ url_for('participants_activities_analytics') }}">Analytics</a>
+            </li>
+
             <!-- Activity Management Dropdown -->
             <li class="nav-item dropdown {% if current_page in ['manage_activities', 'activity_participants', 'activity_public'] %}active{% endif %}">
                 <a class="nav-link dropdown-toggle text-white" href="#" id="activityDropdown" role="button"
Index: Staff_directory.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, render_template, request, redirect, url_for, flash, session\r\nfrom Forms import CreateParticipantActivityForm, ReplyParticipantEnquiryForm, CreateProductForm, CreateActivityForm, CreateAccountForm\r\n\r\nimport shelve, os, Participant_Activity, Account, Activity_public, Product\r\n\r\nfrom math import ceil\r\nfrom datetime import timedelta\r\nfrom functools import wraps\r\n\r\napp = Flask(__name__)\r\napp.secret_key = '8f5b21e9-9a55-4879-9218-57c9e81c01e1'           # Random UUIDv4 value\r\napp.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=10)  # 10 minutes inactivity before timeout\r\n\r\n\r\nusers = {\r\n    \"Bob\": \"password\",      # Example Staff\r\n    \"Mary\": \"password123\"\r\n}\r\n\r\n\r\n# <-------- Misc management -------->\r\n\r\ndef login_required(f):\r\n    @wraps(f)                                       # Prevent access if not logged in\r\n    def custom_login(*args, **kwargs):\r\n        if 'user' not in session:\r\n            return redirect(url_for('login'))\r\n        return f(*args, **kwargs)\r\n    return custom_login\r\n\r\n\r\n\r\ndef sync_account_id():\r\n    try:\r\n        db = shelve.open('storage/storage_accounts.db', 'r')\r\n        accounts_dict = db['Accounts']\r\n        max_id = max(account.get_user_id() for account in accounts_dict.values())\r\n        Account.Account.count_id = max_id\r\n        db.close()\r\n    except KeyError:\r\n        # 'Accounts' key doesn't exist in the shelve yet / No accounts exist\r\n        Account.Account.count_id = 0\r\n    except Exception as e:\r\n        print(\"Error syncing account ID:\", e)\r\n\r\n\r\n\r\ndef sync_public_activity_id():\r\n    try:\r\n        db = shelve.open('storage/storage_activities.db', 'r')\r\n        activities_dict = db['Activities']\r\n        max_id = max(activity.get_activity_id() for activity in activities_dict.values())\r\n        Activity_public.ActivityPublic.count_id = max_id\r\n        db.close()\r\n    except KeyError:\r\n        # 'Activities' key doesn't exist in the shelve yet / No activities exist\r\n        Activity_public.ActivityPublic.count_id = 0\r\n    except Exception as e:\r\n        print(\"Error syncing activity ID:\", e)\r\n\r\n\r\ndef sync_participant_activity_id():\r\n    try:\r\n        db = shelve.open('storage/participant_activity_storage.db', 'r')\r\n        participants_activities_dict = db['Activities']\r\n        max_id = max(activity.get_activity_id() for activity in participants_activities_dict.values())\r\n        Participant_Activity.ParticipantActivity.count_id = max_id\r\n        db.close()\r\n    except KeyError:\r\n        # 'Activities' key doesn't exist in the shelve yet / No activities exist\r\n        Participant_Activity.ParticipantActivity.count_id = 0\r\n    except Exception as e:\r\n        print(\"Error syncing activity ID:\", e)\r\n\r\n\r\n# <-------- Routes -------->\r\n\r\n\r\n@app.route('/')\r\n@login_required\r\ndef dashboard():\r\n    return render_template('Staff/dashboard.html',\r\n                           current_page='dashboard')\r\n\r\n\r\n@app.route('/account-management', methods=['GET', 'POST'])\r\n@login_required\r\ndef manage_accounts():\r\n    search_query = request.args.get('search', '').lower()\r\n    page = request.args.get('page', 1, type=int)\r\n    per_page = 10\r\n\r\n\r\n    db = shelve.open('storage/storage_accounts.db', 'r')\r\n    accounts_dict = db.get('Accounts', {})\r\n    db.close()\r\n\r\n    accounts_list = list(accounts_dict.values())\r\n\r\n    if search_query:\r\n        accounts_list = [\r\n            account for account in accounts_list\r\n            if search_query in account.get_first_name().lower() or search_query in account.get_last_name().lower()\r\n        ]\r\n\r\n\r\n    total = len(accounts_list)\r\n    pages = ceil(total / per_page)\r\n    start = (page - 1) * per_page\r\n    end = start + per_page\r\n    paginated_activities = accounts_list[start:end]\r\n    return render_template('Staff/account_management.html',\r\n                           current_page='account_management',\r\n                           count=total,\r\n                           page=page,\r\n                           pages=pages,\r\n                           accounts_list=paginated_activities,\r\n                           search_query=search_query)\r\n\r\n\r\n@app.route('/account-management/create', methods=['GET', 'POST'])\r\n@login_required\r\ndef create_account():\r\n    sync_account_id()\r\n\r\n    create_account_form = CreateAccountForm(request.form)\r\n    if request.method == 'POST' and create_account_form.validate():\r\n        accounts_dict = {}\r\n        db = shelve.open('storage/storage_accounts.db', 'c')\r\n\r\n        try:\r\n            accounts_dict = db['Accounts']\r\n        except Exception as e:\r\n            print(\"Error in retrieving Users from storage_accounts.db.:\", e)\r\n\r\n        account = Account.Account(create_account_form.first_name.data,\r\n                         create_account_form.last_name.data,\r\n                         create_account_form.gender.data,\r\n                         create_account_form.role.data,\r\n                         create_account_form.email.data)\r\n        accounts_dict[account.get_user_id()] = account\r\n        db['Accounts'] = accounts_dict\r\n\r\n        db.close()\r\n\r\n        return redirect(url_for('manage_accounts'))\r\n    return render_template('/Staff/account_create.html',\r\n                           form=create_account_form,\r\n                           current_page='account_create')\r\n\r\n\r\n@app.route('/account-management/<int:id>/', methods=['GET', 'POST'])\r\n@login_required\r\ndef update_account(id):\r\n    update_account_form = CreateAccountForm(request.form)\r\n    if request.method == 'POST' and update_account_form.validate():\r\n        accounts_dict = {}\r\n        db = shelve.open('storage/storage_accounts.db', 'w')\r\n        accounts_dict = db['Accounts']\r\n\r\n        account = accounts_dict.get(id)\r\n        account.set_first_name(update_account_form.first_name.data)\r\n        account.set_last_name(update_account_form.last_name.data)\r\n        account.set_gender(update_account_form.gender.data)\r\n        account.set_role(update_account_form.role.data)\r\n        account.set_email(update_account_form.email.data)\r\n\r\n        db['Accounts'] = accounts_dict\r\n        db.close()\r\n\r\n        return redirect(url_for('manage_accounts'))\r\n    else:\r\n        accounts_dict = {}\r\n        db = shelve.open('storage/storage_accounts.db', 'r')\r\n        accounts_dict = db['Accounts']\r\n        db.close()\r\n\r\n        account = accounts_dict.get(id)\r\n        update_account_form.first_name.data = account.get_first_name()\r\n        update_account_form.last_name.data = account.get_last_name()\r\n        update_account_form.gender.data = account.get_gender()\r\n        update_account_form.role.data = account.get_role()\r\n        update_account_form.email.data = account.get_email()\r\n\r\n        return render_template('/Staff/account_update.html',\r\n                               form=update_account_form,\r\n                               current_page='account_update')\r\n\r\n\r\n@app.route('/account-management/delete/<int:id>/', methods=['POST'])\r\n@login_required\r\ndef delete_account(id):\r\n    accounts_dict = {}\r\n    db = shelve.open('storage/storage_accounts.db', 'w')\r\n    accounts_dict = db['Accounts']\r\n\r\n    accounts_dict.pop(id)\r\n\r\n    db['Accounts'] = accounts_dict\r\n    db.close()\r\n    return redirect(url_for('manage_accounts'))\r\n\r\n\r\n@app.route('/activity-management/public', methods=['GET', 'POST'])\r\n@login_required\r\ndef activity_public():\r\n    search_query = request.args.get('search', '').lower()\r\n    page = request.args.get('page', 1, type=int)\r\n    per_page = 5  # Number of activities per page\r\n\r\n    db = shelve.open('storage/storage_activities.db', 'r')\r\n    activities_dict = db.get('Activities', {})\r\n    db.close()\r\n\r\n    activities_list = list(activities_dict.values())\r\n\r\n    if search_query:                # for search filtering\r\n        activities_list = [\r\n            activity for activity in activities_list\r\n            if search_query in activity.get_activity_name().lower()\r\n        ]\r\n\r\n    total = len(activities_list)\r\n    pages = ceil(total / per_page) # round up to nearest integer\r\n    start = (page - 1) * per_page\r\n    end = start + per_page\r\n    paginated_activities = activities_list[start:end]\r\n\r\n    return render_template(\r\n        'Staff/activity_public.html',\r\n        current_page='activity_public',\r\n        count=total,\r\n        activities=paginated_activities,\r\n        page=page,\r\n        pages=pages,\r\n        search_query=search_query)\r\n\r\n\r\n@app.route('/activity-management/public/create', methods=['GET','POST'])\r\n@login_required\r\ndef activity_public_create():\r\n    sync_public_activity_id()\r\n\r\n    create_activity_form = CreateActivityForm(request.form)\r\n    if request.method == 'POST' and create_activity_form.validate():\r\n        activities_dict = {}\r\n        db = shelve.open('storage/storage_activities.db', 'c')\r\n\r\n        try:\r\n            activities_dict = db['Activities']\r\n        except Exception as e:\r\n            print(\"Error in retrieving Users from storage_activities.db.:\", e)\r\n\r\n        activity = Activity_public.ActivityPublic(create_activity_form.activity_name.data,\r\n                                                  create_activity_form.activity_details.data,\r\n                                                  create_activity_form.activity_venue.data,\r\n                                                  create_activity_form.activity_start_datetime.data,\r\n                                                  create_activity_form.activity_end_datetime.data)\r\n\r\n        activities_dict[activity.get_activity_id()] = activity\r\n        db['Activities'] = activities_dict\r\n\r\n        db.close()\r\n\r\n        return redirect(url_for('activity_public'))\r\n    return render_template('/Staff/activity_public_create.html',\r\n                           form=create_activity_form,\r\n                           current_page='activity_public_create')\r\n\r\n\r\n@app.route('/activity-management/public/<int:id>/', methods=['GET', 'POST'])\r\n@login_required\r\ndef activity_public_update(id):\r\n    activity_form = CreateActivityForm(request.form)\r\n\r\n    if request.method == 'POST' and activity_form.validate():\r\n        db = shelve.open('storage/storage_activities.db', 'w')\r\n        activities_dict = db.get('Activities', {})\r\n\r\n        activity = activities_dict.get(id)\r\n        activity.set_activity_name(activity_form.activity_name.data)\r\n        activity.set_activity_details(activity_form.activity_details.data)\r\n        activity.set_activity_venue(activity_form.activity_venue.data)\r\n        activity.set_activity_start_datetime(activity_form.activity_start_datetime.data)\r\n        activity.set_activity_end_datetime(activity_form.activity_end_datetime.data)\r\n\r\n        db['Activities'] = activities_dict\r\n        db.close()\r\n\r\n        return redirect(url_for('activity_public'))  # Change to your actual display function name\r\n\r\n    else:\r\n        db = shelve.open('storage/storage_activities.db', 'r')\r\n        activities_dict = db.get('Activities', {})\r\n        db.close()\r\n\r\n        activity = activities_dict.get(id)\r\n        # if not activity:\r\n        #     return \"Activity not found\", 404\r\n\r\n        activity_form.activity_name.data = activity.get_activity_name()\r\n        activity_form.activity_details.data = activity.get_activity_details()\r\n        activity_form.activity_venue.data = activity.get_activity_venue()\r\n        activity_form.activity_start_datetime.data = activity.get_activity_start_datetime()\r\n        activity_form.activity_end_datetime.data = activity.get_activity_end_datetime()\r\n\r\n        return render_template('/Staff/activity_public_update.html',\r\n                               form=activity_form,\r\n                               current_page='activity_public_update')\r\n\r\n\r\n@app.route('/activity-management/delete/<int:id>/', methods=['POST'])\r\n@login_required\r\ndef activity_public_delete(id):\r\n    activities_dict = {}\r\n    db = shelve.open('storage/storage_activities.db', 'w')\r\n    activities_dict = db['Activities']\r\n\r\n    activities_dict.pop(id)\r\n\r\n    db['Activities'] = activities_dict\r\n    db.close()\r\n    return redirect(url_for('activity_public'))\r\n\r\n\r\n@app.route('/profile')\r\n@login_required\r\ndef profile():\r\n    return render_template('Staff/profile.html', current_page='profile')\r\n\r\n\r\n\r\n# <-------- Staff (Participants) Done by Kang Bin -------->\r\n\r\n@app.route('/activity-management/participants')\r\n@login_required\r\ndef activity_participants():\r\n    # Get filter parameters\r\n    selected_activity = request.args.get('activity', '')\r\n    selected_venue = request.args.get('venue', '')\r\n    page = request.args.get('page', 1, type=int)\r\n    per_page = 6  # Items per page\r\n\r\n    # Open database\r\n    db = shelve.open('storage/participant_activity_storage.db', 'r')\r\n    activities_dict = db.get('Activities', {})\r\n    db.close()\r\n\r\n    # Get all unique venues and activity names for dropdowns\r\n    all_activities = list(activities_dict.values())\r\n    venues = sorted({activity.get_venue() for activity in all_activities})\r\n    activity_names = sorted({activity.get_name() for activity in all_activities})\r\n\r\n    # Apply filters\r\n    filtered_activities = []\r\n    for activity in all_activities:\r\n        activity_match = not selected_activity or activity.get_name() == selected_activity\r\n        venue_match = not selected_venue or activity.get_venue() == selected_venue\r\n\r\n        if activity_match and venue_match:\r\n            filtered_activities.append(activity)\r\n\r\n    # Sort by date (newest first)\r\n    filtered_activities.sort(key=lambda x: x.get_date(), reverse=True)\r\n\r\n    # Pagination\r\n    total = len(filtered_activities)\r\n    pages = ceil(total / per_page)\r\n    start = (page - 1) * per_page\r\n    end = start + per_page\r\n    paginated_activities = filtered_activities[start:end]\r\n\r\n    return render_template(\r\n        'Staff/activity_participants.html',\r\n        current_page='activity_participants',\r\n        count=total,\r\n        activities=paginated_activities,\r\n        page=page,\r\n        pages=pages,\r\n        selected_activity=selected_activity,\r\n        selected_venue=selected_venue,\r\n        venues=venues,\r\n        activity_names=activity_names\r\n    )\r\n\r\n@app.route('/activity-management/participants/<int:activity_id>/attendance')\r\n@login_required\r\ndef view_attendance(activity_id):\r\n    # Get the activity\r\n    participants_activities_dict = {}\r\n    db = shelve.open('storage/participant_activity_storage.db', 'r')\r\n    try:\r\n        participants_activities_dict = db['Activities']\r\n    except KeyError:\r\n        flash('Activities database not found', 'error')\r\n    finally:\r\n        db.close()\r\n\r\n    activity = participants_activities_dict.get(activity_id)\r\n\r\n    if not activity:\r\n        flash('Activity not found', 'error')\r\n        return redirect(url_for('activity_participants'))\r\n\r\n    # Get all signups for this activity\r\n    activity_signups_dict = {}\r\n    db = shelve.open('storage/activity_signups.db', 'r')\r\n    try:\r\n        activity_signups_dict = db['Activity_Signups']\r\n    except KeyError:\r\n        flash('Signups database not found', 'error')\r\n    finally:\r\n        db.close()\r\n\r\n    participants = []\r\n    counter = 1\r\n    for signup in activity_signups_dict.values():\r\n        if hasattr(signup, 'get_activity_id') and signup.get_activity_id() == activity_id:\r\n            # Add display number to the signup object\r\n            signup.display_number = counter\r\n            participants.append(signup)\r\n            counter += 1\r\n\r\n    return render_template(\r\n        'Staff/participants_activity_attendance.html',\r\n        current_page='activity_participants',\r\n        activity=activity,\r\n        participants=participants,\r\n        count=len(participants))\r\n\r\n@app.route('/create-participant-activity', methods=['GET', 'POST'])\r\n@login_required\r\ndef create_participant_activity():\r\n    sync_participant_activity_id()\r\n    create_participant_activity_form = CreateParticipantActivityForm(request.form)\r\n    if request.method == 'POST' and create_participant_activity_form.validate():\r\n        participants_activities_dict = {}\r\n        db = shelve.open('storage/participant_activity_storage.db', 'c')\r\n        try:\r\n            participants_activities_dict = db['Activities']\r\n        except:\r\n            print(\"Error in retrieving Activities from storage.db.\")\r\n        activity = Participant_Activity.ParticipantActivity(create_participant_activity_form.name.data,\r\n            create_participant_activity_form.description.data,\r\n            create_participant_activity_form.venue.data,\r\n            create_participant_activity_form.date.data,\r\n            create_participant_activity_form.start_time.data,\r\n            create_participant_activity_form.end_time.data)\r\n        participants_activities_dict[activity.get_activity_id()] = activity\r\n        db['Activities'] = participants_activities_dict\r\n        db.close()\r\n        return redirect(url_for('activity_participants'))\r\n    return render_template('Staff/create_participant_activity.html',\r\n                           form=create_participant_activity_form,\r\n                           current_page='create_participant_activity')\r\n\r\n\r\n@app.route('/update-participant-activity/<int:id>/', methods=['GET', 'POST'])\r\n@login_required\r\ndef update_participant_activity(id):\r\n    update_participant_activity_form = CreateParticipantActivityForm(request.form)\r\n    if request.method == 'POST' and update_participant_activity_form.validate():\r\n        activities_dict = {}\r\n        db = shelve.open('storage/participant_activity_storage.db', 'w')\r\n        activities_dict = db['Activities']\r\n\r\n        activity = activities_dict.get(id)\r\n        activity.set_name(update_participant_activity_form.name.data)\r\n        activity.set_description(update_participant_activity_form.description.data)\r\n        activity.set_venue(update_participant_activity_form.venue.data)\r\n        activity.set_date(update_participant_activity_form.date.data)\r\n        activity.set_start_time(update_participant_activity_form.start_time.data)\r\n        activity.set_end_time(update_participant_activity_form.end_time.data)\r\n\r\n        db['Activities'] = activities_dict\r\n        db.close()\r\n        return redirect(url_for('activity_participants'))\r\n    else:\r\n        participants_activities_dict = {}\r\n        db = shelve.open('storage/participant_activity_storage.db', 'r')\r\n        participants_activities_dict = db['Activities']\r\n        db.close()\r\n\r\n        activity = participants_activities_dict.get(id)\r\n        update_participant_activity_form.name.data = activity.get_name()\r\n        update_participant_activity_form.description.data = activity.get_description()\r\n        update_participant_activity_form.venue.data = activity.get_venue()\r\n        update_participant_activity_form.date.data = activity.get_date()\r\n        update_participant_activity_form.start_time.data = activity.get_start_time()\r\n        update_participant_activity_form.end_time.data = activity.get_end_time()\r\n\r\n        return render_template('Staff/update_participant_activity.html',\r\n                               form = update_participant_activity_form,\r\n                               current_page='update_participant_activity')\r\n\r\n@app.route('/delete-participant-activity/<int:id>', methods=['POST'])\r\n@login_required\r\ndef delete_participant_activity(id):\r\n    activities_dict = {}\r\n    db = shelve.open('storage/participant_activity_storage.db', 'w')\r\n    activities_dict = db['Activities']\r\n\r\n    activities_dict.pop(id)\r\n\r\n    db['Activities'] = activities_dict\r\n    db.close()\r\n\r\n    return redirect(url_for('activity_participants'))\r\n\r\n\r\n# Managing Participants Enquiries\r\n@app.route('/enquiry-management/participants')\r\n@login_required\r\ndef enquiry_participants():\r\n    # Handle filter parameters\r\n    selected_subject = request.args.get('subject', '')\r\n    selected_status = request.args.get('status', '')\r\n\r\n    # Initialize variables\r\n    enquiries = []\r\n    all_enquiries = []\r\n\r\n    try:\r\n        # Open the shelve database in read-only mode\r\n        with shelve.open('storage/participant_enquiries_storage.db', 'r') as db:\r\n            # Retrieve all non-deleted enquiries\r\n            all_enquiries = [\r\n                e for e in db.get('Participant_Enquiries', {}).values()\r\n                if not e.get_deleted_for_staff()\r\n            ]\r\n\r\n        # Apply filters if any\r\n        for enquiry in all_enquiries:\r\n            subject_match = not selected_subject or enquiry.get_subject() == selected_subject\r\n            status_match = not selected_status or enquiry.get_status() == selected_status\r\n            if subject_match and status_match:\r\n                enquiries.append(enquiry)\r\n\r\n        # Sort enquiries by ID\r\n        enquiries.sort(key=lambda x: x.get_enquiry_id())\r\n\r\n    except Exception as e:\r\n        print(f\"Error loading enquiries: {str(e)}\")\r\n\r\n    # Define subject and status options\r\n    subjects = ['Activity', 'Technical Issues', 'Account Issues',\r\n                'General Feedback / Concerns', 'Navigation Issues', 'Others']\r\n    statuses = ['Pending', 'Replied']\r\n\r\n    return render_template('Staff/enquiry_participants.html',\r\n                           current_page='enquiry_participants',\r\n                           enquiries=enquiries,\r\n                           count=len(all_enquiries),\r\n                           selected_subject=selected_subject,\r\n                           selected_status=selected_status,\r\n                           subjects=subjects,\r\n                           statuses=statuses)\r\n\r\n\r\n@app.route('/reply-participant-enquiry/<int:id>/', methods=['GET', 'POST'])\r\n@login_required\r\ndef participant_enquiry_reply(id):\r\n    form = ReplyParticipantEnquiryForm(request.form)\r\n\r\n    if request.method == 'POST' and form.validate():\r\n        db = shelve.open('storage/participant_enquiries_storage.db', 'w')\r\n        enquiries_dict = db['Participant_Enquiries']\r\n        enquiry = enquiries_dict.get(id)\r\n\r\n        # Save reply and update status\r\n        enquiry.set_reply(form.reply_text.data)\r\n        enquiry.set_status(\"Replied\")\r\n\r\n        db['Participant_Enquiries'] = enquiries_dict\r\n        db.close()\r\n\r\n        # Redirect back to enquiries list with success\r\n        return redirect(url_for('enquiry_participants'))\r\n\r\n    # GET request - load existing enquiry\r\n    db = shelve.open('storage/participant_enquiries_storage.db', 'r')\r\n    enquiry = db['Participant_Enquiries'].get(id)\r\n    db.close()\r\n\r\n    # Pre-fill form data\r\n    form.name.data = enquiry.get_name()\r\n    form.subject.data = enquiry.get_subject()\r\n    form.message.data = enquiry.get_message()\r\n\r\n    return render_template('Staff/participant_enquiry_reply.html', form=form)\r\n\r\n\r\n@app.route('/staff-delete-participant-enquiry/<int:id>', methods=['POST'])\r\n@login_required\r\ndef staff_delete_participant_enquiry(id):\r\n    try:\r\n        with shelve.open('storage/participant_enquiries_storage.db', 'w') as db:\r\n            enquiries_dict = db.get('Participant_Enquiries', {})\r\n            if id in enquiries_dict:\r\n                enquiries_dict[id].set_deleted_for_staff(True)\r\n                db['Participant_Enquiries'] = enquiries_dict\r\n    except Exception as e:\r\n        print(f\"Error deleting enquiry: {str(e)}\")\r\n\r\n    return redirect(url_for('enquiry_participants'))\r\n\r\n# Managing Public Enquiries\r\n@app.route('/enquiry-management/public')\r\n@login_required\r\ndef enquiry_public():\r\n    # Handle filter parameters\r\n    selected_subject = request.args.get('subject', '')\r\n    selected_status = request.args.get('status', '')\r\n\r\n    # Initialize variables\r\n    enquiries = []\r\n    all_enquiries = []\r\n\r\n    try:\r\n        # Open the shelve database\r\n        with shelve.open('storage/public_enquiries_storage.db', 'r') as db:\r\n            # Retrieve all enquiries\r\n            all_enquiries = list(db.get('Public_Enquiries', {}).values())\r\n\r\n        # Apply filters\r\n        for enquiry in all_enquiries:\r\n            subject_match = not selected_subject or enquiry.get_subject() == selected_subject\r\n            status_match = not selected_status or enquiry.get_status() == selected_status\r\n            if subject_match and status_match:\r\n                enquiries.append(enquiry)\r\n\r\n        # Sort enquiries by ID\r\n        enquiries.sort(key=lambda x: x.get_enquiry_id())\r\n\r\n    except Exception as e:\r\n        print(f\"Error loading enquiries: {str(e)}\")\r\n\r\n    # Define options for filters\r\n    subjects = ['Activity', 'Technical Issues', 'Account Issues',\r\n                'General Feedback', 'Navigation Issues', 'Others']\r\n    statuses = ['Pending', 'Replied']\r\n\r\n    return render_template('Staff/enquiry_public.html',\r\n                           current_page='enquiry_public',\r\n                           enquiries=enquiries,\r\n                           count=len(all_enquiries),\r\n                           selected_subject=selected_subject,\r\n                           selected_status=selected_status,\r\n                           subjects=subjects,\r\n                           statuses=statuses)\r\n\r\n\r\n@app.route('/toggle-enquiry-status/<int:id>', methods=['POST'])\r\n@login_required\r\ndef toggle_enquiry_status(id):\r\n    db = shelve.open('storage/public_enquiries_storage.db', 'w')\r\n    try:\r\n        enquiries_dict = db['Public_Enquiries']\r\n        enquiry = enquiries_dict.get(id)\r\n\r\n        if enquiry:\r\n            # Toggle between Pending/Replied\r\n            new_status = 'Replied' if enquiry.get_status() == 'Pending' else 'Pending'\r\n            enquiry.set_status(new_status)\r\n\r\n            # Save updated enquiry\r\n            enquiries_dict[id] = enquiry\r\n            db['Public_Enquiries'] = enquiries_dict\r\n            flash(f'Status changed to {new_status}', 'success')\r\n        else:\r\n            flash('Enquiry not found', 'danger')\r\n\r\n    except Exception as e:\r\n        print(f\"Error toggling status: {str(e)}\")\r\n        flash('Error updating status', 'danger')\r\n    finally:\r\n        db.close()\r\n\r\n    return redirect(url_for('enquiry_public'))\r\n\r\n\r\n@app.route('/staff-delete-public-enquiry/<int:id>', methods=['POST'])\r\n@login_required\r\ndef staff_delete_public_enquiry(id):\r\n    try:\r\n        with shelve.open('storage/public_enquiries_storage.db', 'w') as db:\r\n            if 'Public_Enquiries' not in db:\r\n                flash('No enquiries found in database', 'danger')\r\n                return redirect(url_for('enquiry_public'))\r\n\r\n            enquiries_dict = db['Public_Enquiries']\r\n\r\n            if id in enquiries_dict:\r\n                del enquiries_dict[id]\r\n                db['Public_Enquiries'] = enquiries_dict\r\n                flash('Enquiry deleted successfully', 'success')\r\n            else:\r\n                flash('Enquiry not found', 'danger')\r\n\r\n    except Exception as e:\r\n        print(f\"Error deleting enquiry: {str(e)}\")\r\n        flash('Error deleting enquiry', 'danger')\r\n\r\n    return redirect(url_for('enquiry_public'))\r\n\r\n@app.route('/product/management')\r\n@login_required\r\ndef manage_product():\r\n    product_list = []\r\n    count = 0\r\n\r\n    try:\r\n        if os.path.exists('storage/storage_products.db'):  # Check if .db actually exists\r\n            with shelve.open('storage/storage_products.db', flag='r') as productdb:\r\n                products_dict = productdb.get('product', {})\r\n                product_list = list(products_dict.values())\r\n                count = len(product_list)\r\n    except Exception as e:\r\n        print(f\"Error reading product database: {e}\")\r\n        # You can also log this error or flash a message\r\n\r\n    return render_template('Staff/product_management.html',\r\n                           current_page='store_management',\r\n                           count=count,\r\n                           product_list=product_list)\r\n\r\n\r\n@app.route('/store_management/product_management/create-product', methods=['GET', 'POST'])\r\ndef create_product():\r\n    create_product_form = CreateProductForm(request.form)\r\n    if request.method == 'POST' and create_product_form.validate():\r\n        # Save form data to shelf if successful\r\n        product_dict = {}\r\n        productdb = shelve.open('storage/storage_products.db', 'c')\r\n        try:\r\n            product_dict = productdb['product']\r\n        except:\r\n            print(\"Error in retrieving products from storage_products.db.\")\r\n        new_product = Product.Product(\r\n            create_product_form.product.data,\r\n            create_product_form.description.data,\r\n            create_product_form.price.data,\r\n            create_product_form.image_url.data)\r\n        product_dict[new_product.get_product_id()] = new_product\r\n        productdb['product'] = product_dict\r\n\r\n        productdb.close()\r\n        print(\"Product created successfully\")\r\n        # Return user to management page\r\n        return redirect(url_for('manage_product'))\r\n    # If form unsuccessful / unfinished return user to form page\r\n    return render_template('Staff/product_create.html', form=create_product_form)\r\n\r\n@app.route('/enquiry-management')\r\ndef manage_enquiries():\r\n    return render_template('Staff/enquiry_management.html', current_page='manage_enquiries')\r\n\r\n\r\n\r\n@app.route('/store_management')\r\n@login_required\r\ndef manage_store():\r\n    return render_template('Staff/store_management.html', current_page='store_management')\r\n\r\n# <-------- Login Routes -------->\r\n\r\n@app.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n    if request.method == 'POST':\r\n        username = request.form['username']         # Login details submitted to server\r\n        password = request.form['password']\r\n\r\n        if username in users and users[username] == password:\r\n            session.permanent = True    # Start inactivity tracking\r\n            session['user'] = username\r\n            return redirect(url_for('dashboard'))\r\n        else:\r\n            flash('Invalid username or password.', 'error')\r\n    return render_template('Login_SignUp/staff_login.html', current_page='login')\r\n\r\n\r\n@app.route('/logout')\r\ndef logout():\r\n    session.clear()\r\n    return redirect(url_for('login'))\r\n\r\n@app.route('/change-password', methods=['GET', 'POST'])\r\n@login_required\r\ndef change_password():\r\n    username = session['user']\r\n\r\n    if request.method == 'POST':\r\n        current_pw = request.form['current_password']       # Retrieve form inputs\r\n        new_pw = request.form['new_password']\r\n        confirm_pw = request.form['confirm_password']\r\n\r\n        if users[username] != current_pw:\r\n            flash(\"Current password is incorrect.\", \"error\")\r\n        elif new_pw != confirm_pw:\r\n            flash(\"New passwords do not match.\", \"error\")\r\n        else:\r\n            users[username] = new_pw                        # updated password\r\n            flash(\"Password updated successfully!\", \"success\")\r\n            return redirect(url_for('dashboard'))\r\n    return render_template('Staff/change_password.html', current_page='change_password')\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Staff_directory.py b/Staff_directory.py
--- a/Staff_directory.py	(revision 3eea857613544765d55b7bbb3d7d9192da070787)
+++ b/Staff_directory.py	(date 1754558035095)
@@ -383,6 +383,37 @@
         activity_names=activity_names
     )
 
+@app.route('/activity-management/participants/analytics')
+@login_required
+def participants_activities_analytics():
+    # Load activities
+    with shelve.open('storage/participant_activity_storage.db', 'r') as db:
+        activities = db.get('Activities', {})
+
+    # Load signups
+    with shelve.open('storage/activity_signups.db', 'r') as db:
+        signups = db.get('Activity_Signups', {})
+
+    # Count participants per activity
+    activity_counts = {}
+    for signup in signups.values():
+        activity_id = signup.get_activity_id()
+        if activity_id in activities:
+            name = activities[activity_id].get_name()
+            activity_counts[name] = activity_counts.get(name, 0) + 1
+
+    # Sort by count descending
+    sorted_activities = sorted(activity_counts.items(), key=lambda x: x[1], reverse=True)
+
+    activity_names = [name for name, _ in sorted_activities]
+    signup_counts = [count for _, count in sorted_activities]
+
+    return render_template('Staff/participants_activities_analytics.html',
+                           current_page='analytics',
+                           activity_names=activity_names,
+                           signup_counts=signup_counts)
+
+
 @app.route('/activity-management/participants/<int:activity_id>/attendance')
 @login_required
 def view_attendance(activity_id):
Index: templates/Staff/participants_activities_analytics.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/Staff/participants_activities_analytics.html b/templates/Staff/participants_activities_analytics.html
new file mode 100644
--- /dev/null	(date 1754557967538)
+++ b/templates/Staff/participants_activities_analytics.html	(date 1754557967538)
@@ -0,0 +1,42 @@
+{% extends "Staff/base.html" %}
+{% block title %}Activity Analytics{% endblock %}
+
+{% block content %}
+<div class="container mt-4">
+    <h2 class="mb-4">Participants Activities Sign-Up Analytics</h2>
+
+    <canvas id="activityChart" width="400" height="200"></canvas>
+
+    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
+    <script>
+        const ctx = document.getElementById('activityChart').getContext('2d');
+        const activityChart = new Chart(ctx, {
+            type: 'bar',
+            data: {
+                labels: {{ activity_names|tojson }},
+                datasets: [{
+                    label: 'Number of Participants',
+                    data: {{ signup_counts|tojson }},
+                    backgroundColor: 'rgba(54, 162, 235, 0.7)',
+                    borderColor: 'rgba(54, 162, 235, 1)',
+                    borderWidth: 1
+                }]
+            },
+            options: {
+                indexAxis: 'y',
+                scales: {
+                    x: {
+                        beginAtZero: true
+                    }
+                },
+                responsive: true,
+                plugins: {
+                    legend: {
+                        display: false
+                    }
+                }
+            }
+        });
+    </script>
+</div>
+{% endblock %}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"8ce9458f-55f7-48b0-be54-992e51ccaf7a\" name=\"Changes\" comment=\"Reverted patch\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/PWID&amp;Public_directory.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/PWID&amp;Public_directory.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Staff_directory.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Staff_directory.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/static/css/public.css\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/static/css/public.css\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/static/images/public_donations_jumbotron.jpg.jpg\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/static/images/public_donations_jumbotron.jpg\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/templates/Public/donations.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/templates/Public/donations.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/templates/Staff/product_management.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/templates/Staff/product_management.html\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;KangBin2005&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\r\n  \"selectedUrlAndAccountId\": {\r\n    \"url\": \"https://github.com/KangBin2005/WebAppDev_Project.git\",\r\n    \"accountId\": \"d70c7199-3351-42f3-96fe-51f9fdb91e43\"\r\n  }\r\n}]]></component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"30us5cX4lx9MCA85G3AblvxSWNX\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ModuleVcsDetector.initialDetectionPerformed\": \"true\",\r\n    \"Python.PWID&Public_directory.executor\": \"Run\",\r\n    \"Python.Staff_directory.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\user\\PycharmProjects\\WebAppDev_Project\\storage\" />\r\n      <recent name=\"C:\\Users\\user\\PycharmProjects\\WebAppDev_Project\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-09060db00ec0-JavaScript-PY-251.26927.90\" />\r\n        <option value=\"bundled-python-sdk-41e8cd69c857-64d779b69b7a-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-251.26927.90\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"8ce9458f-55f7-48b0-be54-992e51ccaf7a\" name=\"Changes\" comment=\"\" />\r\n      <created>1754488609325</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1754488609325</updated>\r\n      <workItem from=\"1754547890700\" duration=\"4711000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Reverted patch\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1754547842663</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1754547842663</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Reverted patch\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Reverted patch\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/WebAppDev_Project$Staff_directory.coverage\" NAME=\"Staff_directory Coverage Results\" MODIFIED=\"1754547947098\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/WebAppDev_Project$Test.coverage\" NAME=\"Test Coverage Results\" MODIFIED=\"1754545695765\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/WebAppDev_Project$PWID_Public_directory.coverage\" NAME=\"PWID&amp;Public_directory Coverage Results\" MODIFIED=\"1754551169259\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 3eea857613544765d55b7bbb3d7d9192da070787)
+++ b/.idea/workspace.xml	(date 1754558161995)
@@ -4,20 +4,26 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="8ce9458f-55f7-48b0-be54-992e51ccaf7a" name="Changes" comment="Reverted patch">
+    <list default="true" id="2cda95aa-1157-4f10-8aab-ae081a975ce2" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/templates/Staff/participants_activities_analytics.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/WebAppDev_Project.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/WebAppDev_Project.iml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/PWID&amp;Public_directory.py" beforeDir="false" afterPath="$PROJECT_DIR$/PWID&amp;Public_directory.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Staff_directory.py" beforeDir="false" afterPath="$PROJECT_DIR$/Staff_directory.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/static/css/public.css" beforeDir="false" afterPath="$PROJECT_DIR$/static/css/public.css" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/static/images/public_donations_jumbotron.jpg.jpg" beforeDir="false" afterPath="$PROJECT_DIR$/static/images/public_donations_jumbotron.jpg" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/templates/Public/donations.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/Public/donations.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/templates/Staff/product_management.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/Staff/product_management.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/templates/includes/staff_navbar.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/includes/staff_navbar.html" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Python Script" />
+        <option value="HTML File" />
+      </list>
+    </option>
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -28,79 +34,46 @@
     &quot;assignee&quot;: &quot;KangBin2005&quot;
   }
 }</component>
-  <component name="GithubPullRequestsUISettings"><![CDATA[{
-  "selectedUrlAndAccountId": {
-    "url": "https://github.com/KangBin2005/WebAppDev_Project.git",
-    "accountId": "d70c7199-3351-42f3-96fe-51f9fdb91e43"
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/KangBin2005/WebAppDev_Project.git&quot;,
+    &quot;accountId&quot;: &quot;0c824a9b-fc4b-4f6d-8d9d-34b07240ec50&quot;
   }
-}]]></component>
+}</component>
   <component name="ProjectColorInfo">{
-  &quot;associatedIndex&quot;: 6
+  &quot;associatedIndex&quot;: 2
 }</component>
-  <component name="ProjectId" id="30us5cX4lx9MCA85G3AblvxSWNX" />
+  <component name="ProjectId" id="30x2elqD8pPE0C63Tz0uJ50lls2" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
+    "DefaultHtmlFileTemplate": "HTML File",
     "ModuleVcsDetector.initialDetectionPerformed": "true",
     "Python.PWID&Public_directory.executor": "Run",
     "Python.Staff_directory.executor": "Run",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "RunOnceActivity.git.unshallow": "true",
-    "git-widget-placeholder": "master",
-    "node.js.detected.package.eslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "vue.rearranger.settings.migration": "true"
+    "git-widget-placeholder": "master"
   }
 }]]></component>
-  <component name="RecentsManager">
-    <key name="MoveFile.RECENT_KEYS">
-      <recent name="C:\Users\user\PycharmProjects\WebAppDev_Project\storage" />
-      <recent name="C:\Users\user\PycharmProjects\WebAppDev_Project" />
-    </key>
-  </component>
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
-        <option value="bundled-js-predefined-d6986cc7102b-09060db00ec0-JavaScript-PY-251.26927.90" />
-        <option value="bundled-python-sdk-41e8cd69c857-64d779b69b7a-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-251.26927.90" />
+        <option value="bundled-python-sdk-348a24fa61fa-5312c7369657-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-251.23774.444" />
       </set>
     </attachedChunks>
   </component>
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
-      <changelist id="8ce9458f-55f7-48b0-be54-992e51ccaf7a" name="Changes" comment="" />
-      <created>1754488609325</created>
+      <changelist id="2cda95aa-1157-4f10-8aab-ae081a975ce2" name="Changes" comment="" />
+      <created>1754555001187</created>
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
-      <updated>1754488609325</updated>
-      <workItem from="1754547890700" duration="4711000" />
+      <updated>1754555001187</updated>
     </task>
-    <task id="LOCAL-00001" summary="Reverted patch">
-      <option name="closed" value="true" />
-      <created>1754547842663</created>
-      <option name="number" value="00001" />
-      <option name="presentableId" value="LOCAL-00001" />
-      <option name="project" value="LOCAL" />
-      <updated>1754547842663</updated>
-    </task>
-    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
-  <component name="TypeScriptGeneratedFilesManager">
-    <option name="version" value="3" />
-  </component>
-  <component name="VcsManagerConfiguration">
-    <MESSAGE value="Reverted patch" />
-    <option name="LAST_COMMIT_MESSAGE" value="Reverted patch" />
-  </component>
-  <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/WebAppDev_Project$Staff_directory.coverage" NAME="Staff_directory Coverage Results" MODIFIED="1754547947098" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/WebAppDev_Project$Test.coverage" NAME="Test Coverage Results" MODIFIED="1754545695765" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/WebAppDev_Project$PWID_Public_directory.coverage" NAME="PWID&amp;Public_directory Coverage Results" MODIFIED="1754551169259" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-  </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Black\">\r\n    <option name=\"sdkName\" value=\"Python 3.13 (WebAppDev_Project) (4)\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.13\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 3eea857613544765d55b7bbb3d7d9192da070787)
+++ b/.idea/misc.xml	(date 1754556178665)
@@ -1,7 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="Black">
-    <option name="sdkName" value="Python 3.13 (WebAppDev_Project) (4)" />
+    <option name="sdkName" value="Python 3.13 (WebAppDev_Project)" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.13" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/WebAppDev_Project.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/.venv\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.13\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/WebAppDev_Project.iml b/.idea/WebAppDev_Project.iml
--- a/.idea/WebAppDev_Project.iml	(revision 3eea857613544765d55b7bbb3d7d9192da070787)
+++ b/.idea/WebAppDev_Project.iml	(date 1754556178670)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/.venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.13" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.13 (WebAppDev_Project)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
